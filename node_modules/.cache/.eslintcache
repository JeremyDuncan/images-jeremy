[{"/Users/jeremyduncan/repos/LearnAcademy/javascript-practice/react-challenges/images-jeremy/src/index.js":"1","/Users/jeremyduncan/repos/LearnAcademy/javascript-practice/react-challenges/images-jeremy/src/App.js":"2","/Users/jeremyduncan/repos/LearnAcademy/javascript-practice/react-challenges/images-jeremy/src/reportWebVitals.js":"3","/Users/jeremyduncan/repos/LearnAcademy/javascript-practice/react-challenges/images-jeremy/src/components/LightSwitch.js":"4","/Users/jeremyduncan/repos/LearnAcademy/javascript-practice/react-challenges/images-jeremy/src/components/SwitchImages.js":"5"},{"size":535,"mtime":1652664046883,"results":"6","hashOfConfig":"7"},{"size":2340,"mtime":1652726163678,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1652664046884,"results":"9","hashOfConfig":"7"},{"size":1123,"mtime":1652725848480,"results":"10","hashOfConfig":"7"},{"size":198,"mtime":1652723272691,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1n7e8a9",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"/Users/jeremyduncan/repos/LearnAcademy/javascript-practice/react-challenges/images-jeremy/src/index.js",[],[],"/Users/jeremyduncan/repos/LearnAcademy/javascript-practice/react-challenges/images-jeremy/src/App.js",[],[],"/Users/jeremyduncan/repos/LearnAcademy/javascript-practice/react-challenges/images-jeremy/src/reportWebVitals.js",[],[],"/Users/jeremyduncan/repos/LearnAcademy/javascript-practice/react-challenges/images-jeremy/src/components/LightSwitch.js",["29","30","31"],[],"import React, { Component } from 'react'\nimport switchImage from './SwitchImages'\nclass LightSwitch extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      switch: \"Off\",\n      light: \"switch-off light-bulb\",\n      image: switchImage\n    }\n  }\n\n  // When square is clicked, flip switch on or off\n  flipSwitch = () => {\n    var switchFlipped = this.state.switch;\n    {switchFlipped == \"Off\" ? \n    this.setState({switch: \"On\", light: \"switch-on light-bulb\"}): \n    this.setState({switch: \"Off\", light: \"switch-off light-bulb\"})\n    };\n    \n  }\n  render() {\n    return(\n      <div className=\"container App-header\">\n          <div className={this.state.light}>\n            { \n            <div className=\"center-text\">\n              {this.state.switch}\n            </div>\n            }\n          </div>\n          <div className=\"center\">\n            {/* onClick flip switch On or Off */}\n            <img src={switchImage[this.state.switch]} \n              onClick={this.flipSwitch} \n              width=\"100px\" height=\"200px\"/>\n          </div>\n      </div>\n    )\n  }\n}\nexport default LightSwitch;",[],"/Users/jeremyduncan/repos/LearnAcademy/javascript-practice/react-challenges/images-jeremy/src/components/SwitchImages.js",[],[],{"ruleId":"32","severity":1,"message":"33","line":16,"column":5,"nodeType":"34","messageId":"35","endLine":19,"endColumn":6},{"ruleId":"36","severity":1,"message":"37","line":16,"column":20,"nodeType":"38","messageId":"39","endLine":16,"endColumn":22},{"ruleId":"40","severity":1,"message":"41","line":34,"column":13,"nodeType":"42","endLine":36,"endColumn":45},"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]